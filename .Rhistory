y <- peak2$Y
# X is the pixel count by CCD monitor
x <- peak2$X
# Define a Gaussian function (of four parameters).
f <- function(x, theta)  {
m <- theta[1]
s <- theta[2]
a <- theta[3]
b <- theta[4]
a * exp(- 0.5 * ((x - m) / s)^2) + b
}
# Estimate some starting values.
m.0 <- x[which.max(y)]
s.0 <- (max(x)-min(x))/4
b.0 <- min(y)
a.0 <- (max(y)-min(y))
# Do the fit.
p2m <- nls(y ~ f(x,c(m,s,a,b)), data.frame(x,y), start=list(m=m.0, s=s.0, a=a.0, b=b.0))
# Record the predicted values (fitted values)
peak2 <- peak2 %>% mutate(fit=predict(p2m))
# Let's see the reduced chi-squared value for this nonlinear fitting
r.chi_cal(peak2$Y,p2m)
m_gapm1$model
summary(m_gapm1$model)
summary(m_gapm1$model[1])
summary(m_gapm1$model[[1]])
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, df$model[[1]])
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun))
m_gapm1 %>% mutate(r.chi = map(data, model_chi))
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, df$model[[1]])
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun))
m_gapm1 %>% mutate(r.chi = map(., model_chi))
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, df$model[[1]])
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun))
m_gapm1 %>% mutate(r.chi = map(m_gapm1, model_chi))
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, model_fun(df))
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun))
m_gapm1 %>% mutate(r.chi = map(data, model_chi))
m_gapm1
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, model_fun(df))
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun)) %>%
mutate(r.chi = map(data, model_chi))
#m_gapm1 %>% mutate(r.chi = map(data, model_chi))
m_gapm1
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, model_fun(df))
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun)) %>%
mutate(r.chi = map(data, model_chi))
#m_gapm1 %>% mutate(r.chi = map(data, model_chi))
m_gapm1$r.chi
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, model_fun(df))
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun)) %>%
mutate(r.chi = map(data, model_chi))
#m_gapm1 %>% mutate(r.chi = map(data, model_chi))
m_gapm1$r.chi[[1]]
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, model_fun(df))
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun)) %>%
mutate(r.chi = map(data, model_chi))
#m_gapm1 %>% mutate(r.chi = map(data, model_chi))
m_gapm1
coef_fun <- function(model) {
coefficients(model)[[1]]
}
r_chisq <- function(r.chi) {
r.chi[[1]]
}
m_gapm1 %>% transmute(continent,
beta = map_dbl(model, coef_fun),
r.chi_squared = map_dbl(r.chi, r_chisq))
# focus on the data versus every continent, we will only evaluate
gapm1 <- gapminder %>%
select(continent, lifeExp, year, pop, gdpPercap) %>%
group_by(continent) %>%
nest()
glimpse(gapm1)
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, model_fun(df))
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun)) %>%
mutate(r.chi = map(data, model_chi))
m_gapm1
coef_fun <- function(model) {
coefficients(model)[[1]]
}
r_chisq <- function(r.chi) {
r.chi[[1]]
}
m_gapm1 %>% transmute(continent,
beta = map_dbl(model, coef_fun),
r.chi_squared = map_dbl(r.chi, r_chisq))
# focus on the data versus every continent, we will only evaluate
gapm1 <- gapminder %>%
select(continent, lifeExp, pop, gdpPercap) %>%
group_by(continent) %>%
nest()
glimpse(gapm1)
model_fun <- function(df) {
lm(lifeExp ~., data = df)
}
model_chi <- function(df) {
r.chi_cal(df$lifeExp, model_fun(df))
}
m_gapm1 <- gapm1 %>%
mutate(model = map(data, model_fun)) %>%
mutate(r.chi = map(data, model_chi))
m_gapm1
coef_fun <- function(model) {
coefficients(model)[[1]]
}
r_chisq <- function(r.chi) {
r.chi[[1]]
}
m_gapm1 %>% transmute(continent,
beta = map_dbl(model, coef_fun),
r.chi_squared = map_dbl(r.chi, r_chisq))
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1]
r.chi_val <- chisq_val / df
r.chi_val
}
# a linear model fitting with one parameter
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(data1$y, model1)
# a linear model fitting with two parameters
data2 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8, 23.9, 26.1, 28.7, 30.4, 32.6),
z = c(0.3, 0.5, 0.8, 0.2, 0.4, 0.1, 0.6, 0.3, 0.2, 0.8, 0.1, 0.3, 0.5, 0.2, 0.4))
model2 <- lm(y ~ x + z, data = data2)
r.chi_cal(data2$y, model2)
# A nonlinear fitting on data from an experiment focusing on sodium D lines
library(tidyverse)
# The data for second peak around wavelength of 589.6nm.
peak2 <- read.csv("peak2.csv")
# Y is the intensity value in A.U.
y <- peak2$Y
# X is the pixel count by CCD monitor
x <- peak2$X
# Define a Gaussian function (of four parameters).
f <- function(x, theta)  {
m <- theta[1]
s <- theta[2]
a <- theta[3]
b <- theta[4]
a * exp(- 0.5 * ((x - m) / s)^2) + b
}
# Estimate some starting values.
m.0 <- x[which.max(y)]
s.0 <- (max(x)-min(x))/4
b.0 <- min(y)
a.0 <- (max(y)-min(y))
# Do the fit.
p2m <- nls(y ~ f(x,c(m,s,a,b)), data.frame(x,y), start=list(m=m.0, s=s.0, a=a.0, b=b.0))
# Record the predicted values (fitted values)
peak2 <- peak2 %>% mutate(fit=predict(p2m))
# Let's see the reduced chi-squared value for this nonlinear fitting
r.chi_cal(peak2$Y,p2m)
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
# a linear model fitting with one parameter
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(data1$y, model1)
# a linear model fitting with two parameters
data2 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8, 23.9, 26.1, 28.7, 30.4, 32.6),
z = c(0.3, 0.5, 0.8, 0.2, 0.4, 0.1, 0.6, 0.3, 0.2, 0.8, 0.1, 0.3, 0.5, 0.2, 0.4))
model2 <- lm(y ~ x + z, data = data2)
r.chi_cal(data2$y, model2)
# A nonlinear fitting on data from an experiment focusing on sodium D lines
library(tidyverse)
# The data for second peak around wavelength of 589.6nm.
peak2 <- read.csv("peak2.csv")
# Y is the intensity value in A.U.
y <- peak2$Y
# X is the pixel count by CCD monitor
x <- peak2$X
# Define a Gaussian function (of four parameters).
f <- function(x, theta)  {
m <- theta[1]
s <- theta[2]
a <- theta[3]
b <- theta[4]
a * exp(- 0.5 * ((x - m) / s)^2) + b
}
# Estimate some starting values.
m.0 <- x[which.max(y)]
s.0 <- (max(x)-min(x))/4
b.0 <- min(y)
a.0 <- (max(y)-min(y))
# Do the fit.
p2m <- nls(y ~ f(x,c(m,s,a,b)), data.frame(x,y), start=list(m=m.0, s=s.0, a=a.0, b=b.0))
# Record the predicted values (fitted values)
peak2 <- peak2 %>% mutate(fit=predict(p2m))
# Let's see the reduced chi-squared value for this nonlinear fitting
r.chi_cal(peak2$Y,p2m)
knitr::opts_chunk$set(echo = TRUE)
reprex::reprex(
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
reprex::reprex(
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
reprex::reprex(
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
reprex::reprex(
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
data1 <- tibble::tibble(x = c(1,2,3,4,5,6,7,8,9,10), y = c(3.1,5.1,7.3,9.3,11.7,13.4,15.5,17.8,19.9,21.8)),
data1 <- tibble::tibble(x = c(1,2,3,4,5,6,7,8,9,10), y = c(3.1,5.1,7.3,9.3,11.7,13.4,15.5,17.8,19.9,21.8)),
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(data1$y, model1)
# a linear model fitting with one parameter
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(data1$y, model1)
# actual calculation by steps
se1 <- summary(model1)$sigma
chisq_val1 <- sum(((data1$y - predict(model1)) / se1) ^ 2)
df1 <- length(data1$y) - summary(model1)$df[1] + 1
r.chi_sq1 <- chisq_val1 / df1
# test the function if equal to the actual value
testthat::test_that("reduced chi-squared function match actual values", {
testthat::expect_equal(r.chi_sq1, r.chi_cal(data1$y, model1))
})
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
# a linear model fitting with one parameter
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(data1$y, model1)
# actual calculation by steps
se1 <- summary(model1)$sigma
chisq_val1 <- sum(((data1$y - predict(model1)) / se1) ^ 2)
df1 <- length(data1$y) - summary(model1)$df[1] + 1
r.chi_sq1 <- chisq_val1 / df1
# test the function if equal to the actual value
testthat::test_that("reduced chi-squared function match actual values", {
testthat::expect_equal(r.chi_sq1, r.chi_cal(data1$y, model1))
})
# a linear model fitting with two parameters
data2 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8, 23.9, 26.1, 28.7, 30.4, 32.6),
z = c(0.3, 0.5, 0.8, 0.2, 0.4, 0.1, 0.6, 0.3, 0.2, 0.8, 0.1, 0.3, 0.5, 0.2, 0.4))
model2 <- lm(y ~ x + z, data = data2)
r.chi_cal(data2$y, model2)
# actual calculation by steps
se2 <- summary(model2)$sigma
chisq_val2 <- sum(((data2$y - predict(model2)) / se2) ^ 2)
df2 <- length(data2$y) - summary(model2)$df[1] + 1
r.chi_sq2 <- chisq_val2 / df2
# test the function if equal to the actual value
testthat::test_that("reduced chi-squared function match actual values", {
testthat::expect_equal(r.chi_sq2, r.chi_cal(data2$y, model2))
})
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(data1$y, model1)
reprex::reprex(
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
)
reprex::reprex(
r.chi_cal(data1$y, model1)
)
reprex::reprex(
r.chi_cal <- function(y, model){
if(!is.numeric(y)) {
stop('I am so sorry, but this function only works for numeric response variable\n',
'You have provided an object of class: ', class(y)[1])
}
if(class(model) != 'lm' & class(model) != 'nls') {
stop('I am so sorry, but this function only works for linear or nonlinear least-squares models\n',
'You have provided an object of class: ', class(model)[1])
}
se <- summary(model)$sigma
chisq_val <- sum(((y - predict(model)) / se) ^ 2)
df <- length(y) - summary(model)$df[1] + 1
r.chi_val <- chisq_val / df
r.chi_val
}
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
reprex::reprex(si = TRUE)
reprex::reprex(si = TRUE)
update.packages()
update.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(usethis)
path <- file.path(tempdir(), "mypkg")
create_package(path)
path <- file.path("C:\Users\jsyxz\Documents\GitHub", "stat-545b-assignments-2B")
path <- file.path("C:/Users/jsyxz/Documents/GitHub", "stat-545b-assignments-2B")
create_package(path)
path <- file.path("C:/Users/jsyxz/Documents/GitHub/stat-545b-assignments-2B", "r.chi_cal")
create_package(path)
path <- file.path("C:/Users/jsyxz/Documents/GitHub/stat-545b-assignments-2B", "r.chisq")
create_package(path)
path <- file.path("C:/Users/jsyxz/Documents/GitHub", "r.chisq")
create_package(path)
proj_activate(path)
use_readme_md()
knitr::opts_chunk$set(echo = TRUE)
library(usethis)
path <- file.path("C:/Users/jsyxz/Documents/GitHub", "r.chisq")
path <- file.path("C:/Users/jsyxz/Documents/GitHub", "r.chisq")
use_readme_md()
install.packages("r.chisq")
devtools::install_github("zhuzp98/r.chisq")
knitr::opts_chunk$set(echo = TRUE)
library(r.chisq)
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(y, model1)
r.chi_cal(data1$y, model1)
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chi_cal(data1$y, model1)
data2 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8, 23.9, 26.1, 28.7, 30.4, 32.6),
z = c(0.3, 0.5, 0.8, 0.2, 0.4, 0.1, 0.6, 0.3, 0.2, 0.8, 0.1, 0.3, 0.5, 0.2, 0.4))
model2 <- lm(y ~ x + z, data = data2)
r.chi_cal(data2$y, model2)
data2 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8, 23.9, 26.1, 28.7, 30.4, 32.6),
z = c(0.3, 0.5, 0.8, 0.2, 0.4, 0.1, 0.6, 0.3, 0.2, 0.8, 0.1, 0.3, 0.5, 0.2, 0.4))
model2 <- lm(y ~ x + z, data = data2)
r.chisq::r.chi_cal(data2$y, model2)
data1 <- tibble::tibble(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
y = c(3.1, 5.1, 7.3, 9.3, 11.7, 13.4, 15.5, 17.8, 19.9, 21.8))
model1 <- lm(y ~ x, data = data1)
r.chisq::r.chi_cal(data1$y, model1)
shiny::runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
shiny::runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
runApp('GitHub/stat-545b-assignments-zhuzp98/assignment-3b/BCL-Shiny')
